/**
 * @fileoverview Defines the Mongoose schema for a Trip, supporting a robust group model with roles
 * and detailed sub-schemas for rich data representation.
 */

const mongoose = require('mongoose');

const placeSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String },
  image: { type: String },
  website: { type: String },
  vicinity: { type: String }
}, { _id: false });

// Sub-schema for richer weather data
const weatherForecastSchema = new mongoose.Schema({
  day: { type: Number, required: true },
  date: { type: String },
  temp: { type: String },
  condition: { type: String },
}, { _id: false });

const budgetSchema = new mongoose.Schema({
    total: { type: Number, required: true },
    travel: { type: Number },
    accommodation: { type: Number },
    activities: { type: Number },
    food: { type: Number },
    breakdown: { type: mongoose.Schema.Types.Mixed }
}, { _id: false });

const routeInfoSchema = new mongoose.Schema({
  fastest: { type: Object },
  cheapest: { type: Object },
  details: { type: mongoose.Schema.Types.Mixed },
  staticMap: { type: String }
}, { _id: false });

// Specific sub-schema for local events
const localEventSchema = new mongoose.Schema({
    name: { type: String, required: true },
    date: { type: Date },
    description: { type: String },
    link: { type: String }
}, { _id: false });

const aiSummarySchema = new mongoose.Schema({
  overview: { 
    type: String, 
    description: "The full narrative overview generated by the AI." 
  },
  highlights: [String],
  tips: [String],
  mustEats: [String],
  packingChecklist: [String]
}, { _id: false });


const TripSchema = new mongoose.Schema({
  group: {
    isGroup: { type: Boolean, default: false },
    members: [{
      userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
      role: { type: String, enum: ['owner', 'editor', 'viewer'], default: 'editor' }
    }],
  },
  destination: {
    type: String,
    required: true,
    trim: true,
  },
  destinationCoordinates: {
    lat: { type: Number },
    lon: { type: Number },
  },
  startDate: {
    type: Date,
    required: true,
  },
  endDate: {
    type: Date,
    required: true,
    validate: {
      validator: function () { return this.endDate >= this.startDate; },
      message: 'End date must be after start date'
    }
  },
  travelers: {
    type: Number,
    default: 1,
    min: 1,
  },
  preferences: {
    transportMode: { type: String },
    accommodationType: { type: String },
  },
  coverImage: {
    type: String,
  },
  // --- Fields Updated for New Enhancements ---
  routeInfo: routeInfoSchema,
  weather: { forecast: [weatherForecastSchema] },
  attractions: [placeSchema], 
  foodRecommendations: [placeSchema], 
  accommodationSuggestions: [placeSchema], 
  budget: budgetSchema,
  localEvents: [localEventSchema],
  alerts: [String],
  itinerary: [{
    day: { type: Number, required: true },
    title: { type: String, required: true },
    activities: [String],
  }],
  aiSummary: aiSummarySchema,
  formattedPlan: {
    type: String,
  },
  tips: [String],
  mustEats: [String],
  highlights: [String],
  packingChecklist: [String],
  favorite: {
    type: Boolean,
    default: false,
  },
  inviteTokens: [{
    token: { type: String, required: true },
    expires: { type: Date, required: true },
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
  }],
  status: {
    type: String,
    enum: ['planned', 'ongoing', 'completed', 'canceled'],
    default: 'planned',
  },
}, { timestamps: true });

TripSchema.index({ 'group.members.userId': 1, startDate: -1 });
TripSchema.index({ destination: 'text' });

module.exports = mongoose.model('Trip', TripSchema);